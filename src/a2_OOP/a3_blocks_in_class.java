/*

Блоки в классе


    Блоком называетс код, заключенный в фигурные скобки не принадлежащий ни одному методу текщего класса.
    Обычно используются для инициализаци полей, или например для открытия файла, сетевого соедининеия, или
    другие ресурсы для работы классса подготавливаются:

            { код }  - обычный блок
            static { код }  - статический блок



    Статические члены класса:
            - поля
            - методы
            - логические блоки (static)

    Статичесике методы:
            - могут вызывать только другие статические методы
            - им доступны только другие статические переменные
            - Не могут использовать  ссылки типа this или super




    При первом обращении к классу (создание объекта или обращение к статическому элементу - неважно):
            - Статические переменные инициализируются нулевыми значениями.
            - Выполняются статические блоки и присваивание статическим переменным значений в порядке их описания в классе.

    При создании объекта:
            - Выделяется память под переменные экземпляра.  Они инициализируются нулевыми значениями.
            - Выполняются нестатические логические блоки и инициализация переменных в том порядке, в котором они расположены в классе.
            - Вызывается конструктор, который и завершает создание объекта.


    (то есть - сначала статичесике блоки в том порядке, в котором они описаны в класее, потом логичесике блоки, потом конструктор)


 */
package a2_OOP;

class a3_blocks_in_class {
    public static void main(String[] args) {
        Test item1 = new Test(1,34);
        System.out.println();
        Test item2 = new Test(2,18);
    }
}




class Test {
    //нестатический блок
    {
        System.out.println("Логический блок 1");
        System.out.println("a = " + a + " b= " + b + " id= " + this.id + " age= " +this.age);
    }

    //статический блок
    static {
        System.out.println("Статический блок 1");
        // System.out.println("a = " + a); //нельзя обратиться к переменной, которая описана далее
    }

    //статические поля
    static int a = 3;
    static int b;

    //поля экземпляра
    private int id = 7;
    private int age;

    public Test(int id, int age) {
        this.id = id;
        this.age = age;
        System.out.println("Конструктор");
        System.out.println("a = " + a + " b = " + b + " id = " + this.id + " age = " +this.age);
    }

    static void method() { //статический метод
        System.out.println("a = " + a);
        System.out.println("b = " + b);
    }

    //статический блок
    static {
        System.out.println("Статический блок 2 начало");
        System.out.println("a = " + a + " b = " + b );
        b=a*4;
        System.out.println("Статический блок 2 конец");
        System.out.println("a = " + a + " b = " + b );
    }

    //нестатический блок - плохое расположение
    {
        System.out.println("Логический блок 2");
        System.out.println("a = " + a + " b = " + b + " id = " + this.id + " age = " +this.age);
    }
}



/*
получим вывод:

        Статический блок 1
        Статический блок 2 начало
        a = 3 b = 0
        Статический блок 2 конец
        a = 3 b = 12
        Логический блок 1
        a = 3 b= 12 id= 0 age= 0
        Логический блок 2
        a = 3 b = 12 id = 7 age = 0
        Конструктор
        a = 3 b = 12 id = 1 age = 34

        Логический блок 1
        a = 3 b= 12 id= 0 age= 0
        Логический блок 2
        a = 3 b = 12 id = 7 age = 0
        Конструктор
        a = 3 b = 12 id = 2 age = 18
 */